generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Perfume {
  id          String      @id @default(cuid())
  name        String
  brand       String
  price       Float
  image       String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  description String
  isNew       Boolean     @default(false)
  isOnSale    Boolean     @default(false)
  discount    Float?
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  promotions  Promotion[]
  OrderItem   OrderItem[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  perfumes    Perfume[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id              String        @id @default(cuid())
  items           OrderItem[]
  total           Float
  status          OrderStatus   @default(PENDING)
  shippingAddress ShippingAddress?
  deliveryFee     Float
  paymentIntent   PaymentIntent?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  perfumeId String
  perfume   Perfume @relation(fields: [perfumeId], references: [id])
  quantity  Int
  price     Float
}

model ShippingAddress {
  id        String   @id @default(cuid())
  fullName  String
  phone     String
  address   String
  city      String
  zone      String
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotion {
  id          String    @id @default(cuid())
  name        String
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean   @default(true)
  perfumes    Perfume[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PaymentIntent {
  id              String        @id @default(cuid())
  amount          Float
  currency        String
  status          PaymentStatus @default(PENDING)
  paymentMethodId String
  orderId         String        @unique
  order           Order         @relation(fields: [orderId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
}